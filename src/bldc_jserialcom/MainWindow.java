/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bldc_jserialcom;

import java.util.logging.Level;
import java.util.logging.Logger;
import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;

/**
 *
 * @author damian
 */
public class MainWindow extends javax.swing.JFrame implements SerialPortEventListener
{

    /**
     * Creates new form MainWindows
     */
    //private byte[] answer;
    private SerialPort serialPort;
    //private String str_answer;
    public MainWindow()
    {
        initComponents();
/*        serialPort = new SerialPort("/dev/ttyUSB0");
        try
        {
            System.out.println("Port opened: " + serialPort.openPort());
            System.out.println("Params setted: " + serialPort.setParams(9600,8,1,0));
            int mask = SerialPort.MASK_RXCHAR;//Prepare mask
            serialPort.setEventsMask(mask);//Set mask
            serialPort.addEventListener(this);//Add SerialPortEventListener

        }
        catch(SerialPortException ex)
        {
            System.out.println(ex);
        }
        answer = new byte[256];*/
        //byte[] buffer = serialPort.readBytes(1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PWM_Freq = new javax.swing.JSlider();
        PWM_Duty = new javax.swing.JSlider();
        Switching_T = new javax.swing.JSlider();
        PWM_ON_OFF = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        BAUDS = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Open_Close_Port = new javax.swing.JToggleButton();
        PORT = new javax.swing.JTextField();
        PWM_FreqText = new javax.swing.JTextField();
        PWM_DutyText = new javax.swing.JTextField();
        Switching_TText = new javax.swing.JTextField();
        Save_Settings = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        PWM_Freq.setMaximum(150000);
        PWM_Freq.setMinimum(100);
        PWM_Freq.setValue(20000);
        PWM_Freq.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                PWM_FreqStateChanged(evt);
            }
        });

        PWM_Duty.setMinimum(1);
        PWM_Duty.setValue(5);
        PWM_Duty.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                PWM_DutyStateChanged(evt);
            }
        });

        Switching_T.setMaximum(1000);
        Switching_T.setValue(0);
        Switching_T.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                Switching_TStateChanged(evt);
            }
        });

        PWM_ON_OFF.setText("PWM ON/OFF");
        PWM_ON_OFF.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                PWM_ON_OFFStateChanged(evt);
            }
        });

        jLabel2.setText("PWM Freq");

        jLabel3.setText("PWM Duty");

        jLabel4.setText("Switching T");

        BAUDS.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        BAUDS.setText("9600");

        jLabel5.setText("PORT");

        jLabel6.setText("BAUDs");

        Open_Close_Port.setText("Open/Close Port");
        Open_Close_Port.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Open_Close_PortActionPerformed(evt);
            }
        });

        PORT.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        PORT.setText("ttyUSB0");

        PWM_FreqText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PWM_FreqTextActionPerformed(evt);
            }
        });
        PWM_FreqText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PWM_FreqTextKeyPressed(evt);
            }
        });

        PWM_DutyText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PWM_DutyTextKeyPressed(evt);
            }
        });

        Switching_TText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Switching_TTextKeyPressed(evt);
            }
        });

        Save_Settings.setText("Save Settings");
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(PORT)
                            .addComponent(BAUDS, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)))
                    .addComponent(Open_Close_Port, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PWM_Freq, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PWM_Duty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(PWM_ON_OFF))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Switching_T, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PWM_FreqText)
                    .addComponent(PWM_DutyText)
                    .addComponent(Switching_TText)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Save_Settings)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PORT, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BAUDS, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Open_Close_Port))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(PWM_Freq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(PWM_FreqText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(PWM_Duty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)))
                            .addComponent(PWM_DutyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel4))
                            .addComponent(Switching_T, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Switching_TText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PWM_ON_OFF)
                            .addComponent(Save_Settings))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PWM_FreqStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_PWM_FreqStateChanged
        // TODO add your handling code here:
        PWM_FreqText.setText(((Integer)PWM_Freq.getValue()).toString());
        String comm;
        comm = "f"+((Integer)PWM_Freq.getValue()).toString()+"\0";
        try
        {
            serialPort.writeBytes(comm.getBytes());
            Thread.sleep(100);
        }
        catch (SerialPortException | InterruptedException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_PWM_FreqStateChanged

    private void PWM_DutyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_PWM_DutyStateChanged
        // TODO add your handling code here:
        PWM_DutyText.setText(((Integer)PWM_Duty.getValue()).toString());
        String comm;
        comm = "d"+((Integer)PWM_Duty.getValue()).toString()+"\0";
        try
        {
            serialPort.writeBytes(comm.getBytes());
            Thread.sleep(100);            
        }
        catch (SerialPortException | InterruptedException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_PWM_DutyStateChanged

    private void Switching_TStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_Switching_TStateChanged
        // TODO add your handling code here:
        Switching_TText.setText(((Integer)Switching_T.getValue()).toString());
        String comm;
        comm = "t"+((Integer)Switching_T.getValue()).toString()+"\0";
        try
        {
            serialPort.writeBytes(comm.getBytes());
            Thread.sleep(100);
        }
        catch (SerialPortException | InterruptedException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_Switching_TStateChanged

    private void ProcessTextBox(javax.swing.JSlider slider,javax.swing.JTextField text,java.awt.event.KeyEvent evt)
    {
        if( evt.getKeyCode() == 10 ) //entro ENTER ??
        {
            //si
            int value;
            try
            {
                value = Integer.parseInt(text.getText());
            }
            catch(java.lang.Exception e)
            {
                value = slider.getValue();
                text.setText(((Integer)value).toString());
            }
            slider.setValue(value);
        }
    }
    
    private void PWM_FreqTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PWM_FreqTextKeyPressed
        // TODO add your handling code here:
        ProcessTextBox(PWM_Freq,PWM_FreqText,evt);
        String comm;
        comm = "f"+((Integer)PWM_Freq.getValue()).toString()+"\0";
        try
        {
            serialPort.writeBytes(comm.getBytes());
            Thread.sleep(100);
        }
        catch (SerialPortException | InterruptedException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_PWM_FreqTextKeyPressed

    private void PWM_DutyTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PWM_DutyTextKeyPressed
        // TODO add your handling code here:
        ProcessTextBox(PWM_Duty,PWM_DutyText,evt);
        String comm;
        comm = "d"+((Integer)PWM_Duty.getValue()).toString()+"\0";
        try
        {
            serialPort.writeBytes(comm.getBytes());
            Thread.sleep(100);            
        }
        catch (SerialPortException | InterruptedException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_PWM_DutyTextKeyPressed

    private void Switching_TTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Switching_TTextKeyPressed
        // TODO add your handling code here:
        ProcessTextBox(Switching_T,Switching_TText,evt);
        String comm;
        comm = "t"+((Integer)Switching_T.getValue()).toString()+"\0";
        try
        {
            serialPort.writeBytes(comm.getBytes());
            Thread.sleep(100);
        }
        catch (SerialPortException | InterruptedException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Switching_TTextKeyPressed

    private void PWM_FreqTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PWM_FreqTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PWM_FreqTextActionPerformed

    private void Open_Close_PortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Open_Close_PortActionPerformed
        if( Open_Close_Port.isSelected() == true )
        {
            try
            {
                // TODO add your handling code here:
                if( System.getProperty("os.name").contains("nux") )
                    serialPort = new SerialPort("/dev/"+PORT.getText());
                else
                    serialPort = new SerialPort(PORT.getText());

                try
                {
                    System.out.println("Port opened: " + serialPort.openPort());
                    System.out.println("Params setted: " + serialPort.setParams(Integer.parseInt(BAUDS.getText()),8,1,0));
                }
                catch(SerialPortException ex)
                {
                    System.out.println(ex);
                    Open_Close_Port.setSelected(false);
                    return;
                }
                String comm;
                comm = "f"+((Integer)PWM_Freq.getValue()).toString()+"\0";
                serialPort.writeBytes(comm.getBytes());
                comm = "d"+((Integer)PWM_Duty.getValue()).toString()+"\0";
                serialPort.writeBytes(comm.getBytes());
                comm = "t"+((Integer)Switching_T.getValue()).toString()+"\0";
                serialPort.writeBytes(comm.getBytes());
            }
            catch(SerialPortException ex)
            {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null,ex);
            }
        }
        else
        {
            try
            {
                serialPort.writeBytes("s\0".getBytes());
                serialPort.closePort();
            }
            catch (SerialPortException ex)
            {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_Open_Close_PortActionPerformed

    private void PWM_ON_OFFStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_PWM_ON_OFFStateChanged
        // TODO add your handling code here:
        try
        {
            if( PWM_ON_OFF.isSelected() == true )
                serialPort.writeBytes("e\0".getBytes());
            else
                serialPort.writeBytes("s\0".getBytes());
        }
        catch(SerialPortException ex)
        {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_PWM_ON_OFFStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BAUDS;
    private javax.swing.JToggleButton Open_Close_Port;
    private javax.swing.JTextField PORT;
    private javax.swing.JSlider PWM_Duty;
    private javax.swing.JTextField PWM_DutyText;
    private javax.swing.JSlider PWM_Freq;
    private javax.swing.JTextField PWM_FreqText;
    private javax.swing.JCheckBox PWM_ON_OFF;
    private javax.swing.JButton Save_Settings;
    private javax.swing.JSlider Switching_T;
    private javax.swing.JTextField Switching_TText;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void serialEvent(SerialPortEvent event)
    {
/*        if(event.isRXCHAR())
        {//If data is available
            while(event.getEventValue() != 0)
            {//Check bytes count in the input buffer
                try
                {
                    byte buffer[] = serialPort.readBytes(event.getEventValue());
                    str_answer = str_answer + new String(buffer);
                    //Text.append(str_answer);
                }
                catch (SerialPortException ex)
                {
                    System.out.println(ex);
                }
            }
        }
*/
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
